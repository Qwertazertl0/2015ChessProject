Chess Project - A Java Swing Program by Maxwell Jong

===========================ABOUT THE PROGRAM===========================
	This program was written between October 30, 2015 and December 13,
2015. It has around 30 hours of coding built into it. This is the final
project for the Computer Programming 1 class headed by Mr. Nessler in
4th Hour at Dunlap High School. It is by far the largest program that I 
have written as of the 13th of December, 2015 at 3,500 lines of code.
	And while the program does lack the true functionality of a 
chess engine due to its lack of an intelligent AI, I am proud to have
created a program that adheres to all the rules of chess (at least the 
graphics version does).

	As a simple high school project, this program is free for distribution
and holds little to no copyright worth.

==========================PROGRAM DESCRIPTION==========================
	The program is split into two sections: the graphics component and
the text-based component. The program will ask which one you would like to use
on start-up.

The computer player is an option that plays a random legal move against the user.

The graphics component presents a graphical representation of the board
and chess pieces. Movements are made by clicking on the piece and then
clicking on the square it is to move to. Squares are automatically highlighted
to aid in visualization. On the top is a the menu which hold additional board
functions. The "Options" menu allows: starting a new game, offering/claiming
a draw, flipping/auto-flipping the board, resigning, and controlling the state 
of the computer player. The "Info" menu presents the rules for claiming a draw
as well as current game information. 

The text-based component can be run by the ant compiler from a version of 
NetBeans IDE. It can also be run from the command prompt (see directions below
for build output instructions, of which were automatically generated by NetBeans).
This version of the chess program does not support many of the functions found
in the graphics version. Draws here are only forced through stalemate, the board
cannot be flipped, resigning is not an option, and each new game must be re-run
by restarting the program. Needless to say, this version of chess is far more
restrictive and unappealing; I created it just to make sure I had to skill to code
a usable text-version, which has its own challenges.

While I am confident that the program does not have bugs in the graphics portion.
I cannot guarantee that the text-based version has been completely debugged. As
such, I recommend that you only use the graphics sections for any practical utility.

========================
BUILD OUTPUT DESCRIPTION
========================


	When you build an Java application project that has a main class, 
the IDE
 automatically copies all of the JAR
 files on the projects classpath
to your projects dist/lib folder. The IDE also adds each of the JAR files 
to the Class-Path element in the application
 JAR files manifest file (MANIFEST.MF).



To run the project from the command line, find the correct directory and
 type the following:


java -jar "ChessProject.jar" 



To distribute this project, zip up the dist folder (including the lib folder)

and distribute the ZIP file.



Notes:


* If two JAR files on the project classpath have the same name, only the first

JAR file is copied to the lib folder.

* Only JAR files are copied to the lib folder. If the classpath contains other 
types of files or folders, these files (folders)
are not copied.

* If a library on the projects classpath also has a Class-Path element

specified in the manifest,the content of the Class-Path element has to be on 
the 
projects runtime path.

* To set a main class in a standard Java project, right-click the project node

in the Projects window and choose Properties. Then click Run and enter the

class name in the Main Class field. Alternatively, you can manually type the

class name in the manifest Main-Class element.
